#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0
# Copyright (C) 2021 Arm Limited or its affiliates and Contributors. All rights reserved.

[[ "$TRACE" ]] && set -x
set -euo pipefail

print_help() {
    echo 'Usage: manyclangs-build-month YYYY MM'
    echo ''
    echo 'manyclangs-build-month is a "set it and forget it" script that builds'
    echo 'the specified month and produces a .pack file.'
}

commits_for_month() {
    YEAR="$1"
    MONTH="$2"

    ((NEXT_YEAR=YEAR))
    ((NEXT_MONTH=10#$MONTH+1))
    if [ $NEXT_MONTH -eq 13 ]; then
        ((NEXT_YEAR=NEXT_YEAR+1))
        ((NEXT_MONTH=1))
    fi

    git-list-between origin/main \
        "$YEAR/$MONTH/01" "$NEXT_YEAR/$NEXT_MONTH/01" -- llvm clang
}

_manyclangs_list_files0_to_pack() {
    find -type f \( -name '*.o' -or -name '*.h' \) -a -print0
    # Also include all LICENSE files, .log files the README and link.sh
    # available at the root of ./build.
    find -maxdepth 1 -type f \( \
            -name link.sh \
            -or -name README \
            -or -name 'LICENSE*' \
            -or -name '*.log' \
            \) -print0
}

_manyclangs_build_part() {
    YEAR=$1
    MONTH=$2
    PART=$3
    BUILDNAME=mc-build-"$YEAR""$MONTH"-part"$PART"
    COMMIT_LIST="$PWD/manyclangs-commit-list.txt.$PART"

    ELFSHAKER_DATA=${ELFSHAKER_DATA-$PWD/elfshaker_data}
    mkdir -p "$ELFSHAKER_DATA"
    CCACHE_DIR=${CCACHE_DIR-$PWD/ccache}

    # FD chosen to avoid collision with jobserver.
    exec 30>&1 # dup 30 to 1, writes to 30 now go to old stdout.
    exec &> ${BUILDNAME}.log # redirect everything to log.

    echo Building part $BUILDNAME

    # Defines where git will write files.
    # Turns out we don't need to do anything other than this.
    # Git restore will ensure that 'no-overlay' is in effect and deleted
    # files will go away.
    export GIT_WORK_TREE="$PWD/${BUILDNAME}" GIT_INDEX_FILE="${BUILDNAME}.gitidx"
    HASHES_DIR=$PWD/hashes
    mkdir -p "$HASHES_DIR"
    mkdir -p "${GIT_WORK_TREE}/build"
    cd "${GIT_WORK_TREE}/build"

    # CCACHE_BASEDIR causes ccache to rewrite arguments to the compiler to be
    # relative to $CCACHE_BASEDIR. This is significant because binaries often
    # end up with paths as specified on the commandline through the macro
    # __PRETTY_FUNCTION__ (see elfshaker/elfshaker#11).
    export CCACHE_DIR CCACHE_BASEDIR="$GIT_WORK_TREE"

    while read COMMIT_SHA SNAPSHOT_NAME
    do
        # Handy comand which sets the sources in ./llvm ./clang to the right
        # contents efficiently (including removing files which have gone).
        GIT_WORK_TREE=.. \
        git restore --no-progress --staged --worktree --source="$COMMIT_SHA" -- \
            llvm clang :^llvm/test :^clang/test

        # manyclangs-build takes care of removing object files not produced by the build system.
        # consume non-zero exit status if present and continue.
        # TODO: On failure, need to make sure not to capture incorrect object files.
        manyclangs-build "$COMMIT_SHA" || true

        ln -frs "${ELFSHAKER_DATA}"
        _manyclangs_list_files0_to_pack | elfshaker store --verbose --files-from0=- "$SNAPSHOT_NAME"
        mv loose.idx "${ELFSHAKER_DATA}/loose/${SNAPSHOT_NAME}.idx"

        _manyclangs_list_files0_to_pack | xargs -0 -P32 sha1sum | sort -k2,2 > ${HASHES_DIR}/${SNAPSHOT_NAME}.txt

        echo Built $SNAPSHOT_NAME 1>&30 # for pv progress output.
    done < "${COMMIT_LIST}"
}

_manyclangs_build_parts() {
    [[ "$TRACE" ]] && set -x
    set -euo pipefail #Â exported function, fresh shell.
    YEAR=$1
    MONTH=$2
    shift 2

    for part in "$@"
    do
        _manyclangs_build_part $YEAR $MONTH "$part"
    done
}

main() {
    # set -x
    YEAR="$1"
    MONTH="$2"
    date -d "$YEAR/$MONTH/01" 1>/dev/null || { print_help; exit 1; }
    # env | grep GIT

    if ! git rev-parse --show-toplevel &> /dev/null
    then
        echo 'Run with GIT_DIR set to path/to/llvm-project/.git or from inside a repository.'
        exit 1
    fi

    # Divide work into small equal-ish-sized parts.
    NPARTS=50
    # Number of parts jobs to run in parallel.
    NPARALLEL=5

    commits_for_month "$YEAR" "$MONTH" > manyclangs-commit-list.txt
    split --number "l/$NPARTS" --numeric-suffixes manyclangs-commit-list.txt{,.}
    COMMIT_COUNT=$(wc -l manyclangs-commit-list.txt | awk '{print $1}')

    export -f _manyclangs_build_parts _manyclangs_build_part _manyclangs_list_files0_to_pack
    # A few extra slots, since we loose at least one to the build system and we
    # don't expect every job to take 100% CPU.
    JOBSLOP=5
    jobserver -j$(($(nproc) + $JOBSLOP)) \
        xargs --max-procs=$NPARALLEL -n1 \
        bash -c '_manyclangs_build_parts "$@"' -- $YEAR $MONTH \
            <<<$(seq -f '%02.0f' 00 $(( $NPARTS - 1 ))) \
            | pv --average-rate --line-mode --size "$COMMIT_COUNT" > /dev/null \
            ;
}

case "${1:--h}" in
    -h | --help)
        print_help
        [ $# -ne 0 ]
        exit $?
        ;;
    *)
        main "$@"
        ;;
esac

